#include <iostream>
#include <vector>
#include <string>
using namespace std;

string longest_common_substring(const string &str1, const string &str2) {
    int n = str1.size();
    int m = str2.size();

    // Create a 2D table to store lengths of common substrings
    vector<vector<int>> table(n + 1, vector<int>(m + 1, 0));

    int longest_length = 0; // Length of the longest common substring
    int end_index_str1 = 0; // Ending index of the substring in str1

    // Fill the table using dynamic programming
    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= m; ++j) {
            if (str1[i - 1] == str2[j - 1]) {
                table[i][j] = table[i - 1][j - 1] + 1;
                if (table[i][j] > longest_length) {
                    longest_length = table[i][j];
                    end_index_str1 = i;
                }
            } else {
                table[i][j] = 0;
            }
        }
    }

    // Extract the longest common substring
    string longest_substring = str1.substr(end_index_str1 - longest_length, longest_length);

    // Print the lookup table (optional)
    cout << "Dynamic Programming Table:\n";
    for (const auto &row : table) {
        for (int value : row) {
            cout << value << " ";
        }
        cout << "\n";
    }

    return longest_substring;
}

int main() {
    string str1 = "ABAB";
    string str2 = "BABA";

    string result = longest_common_substring(str1, str2);
    cout << "Longest Common Substring: " << result << endl;

    return 0;
}
